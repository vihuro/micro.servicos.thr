// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using THR.OBRA.NOTAS.ContextBase;

#nullable disable

namespace THR.OBRA.NOTAS.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230524184238_tabelaUsuario")]
    partial class tabelaUsuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.NotasModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Autorizador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvulsoFinalidade")
                        .HasColumnType("text");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataHoraAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHoraCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoProdutoServico")
                        .HasColumnType("text");

                    b.Property<string>("Fornecedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumeroNota")
                        .HasColumnType("integer");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoExportacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorTotalNota")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("tab_nota");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.ParcelasModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataHoraAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHoraCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NotaId")
                        .HasColumnType("uuid");

                    b.Property<string>("NumeroParcela")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NotaId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("tab_parcela");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.ProdutoServicoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescricaoProdutoServico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NotaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotaId");

                    b.ToTable("tab_produtoServico");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.TimesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataHoraAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHoraCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCadastroId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("tab_time");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tab_usuario");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.NotasModel", b =>
                {
                    b.HasOne("THR.OBRA.NOTAS.Models.Notas.TimesModel", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Time");

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioCadastro");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.ParcelasModel", b =>
                {
                    b.HasOne("THR.OBRA.NOTAS.Models.Notas.NotasModel", "Nota")
                        .WithMany("Parcelas")
                        .HasForeignKey("NotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nota");

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioCadastro");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.ProdutoServicoModel", b =>
                {
                    b.HasOne("THR.OBRA.NOTAS.Models.Notas.NotasModel", "Nota")
                        .WithMany("ProdutosServico")
                        .HasForeignKey("NotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nota");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.TimesModel", b =>
                {
                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("THR.OBRA.NOTAS.Models.Usuario.UsuarioModel", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioCadastro");
                });

            modelBuilder.Entity("THR.OBRA.NOTAS.Models.Notas.NotasModel", b =>
                {
                    b.Navigation("Parcelas");

                    b.Navigation("ProdutosServico");
                });
#pragma warning restore 612, 618
        }
    }
}
